const SEMIAI = {
    // fixed 레이어를 사용할지 여부 (테스트용)
    needFixedLayerFirst: false,
    // link 불러올지 여부 (테스트용)
    useFetchPage: false,
    // 현재 메인 페이지인지 체크
    isMain: false,
    // 현재 화면이 띄워져 잇는지 여부 체크
    isFullReady: false,
    // 마지막 질문 저장
    question: '',
    // full page 띄울때 스크롤 사이즈 (닫을때 복원하기 위함)
    scrollSize: 0,
    // 로더 실행 여부
    loading: true,
    // 로더 비디오
    loaderMP4:
        'https://samsung.cnxkr.com/etc.clientlibs/semiconductor/designs/global/loading-semi.mp4',
    // 최초 실행 함수
    init: function () {
        // 메인 페이지 여부 체크
        if (digitalData.page.pageInfo.pageTrack === 'semiconductor home') SEMIAI.isMain = true;

        // API EndPoint
        SEMIAI.apigeeEndPoint = 'https://34.102.188.190.nip.io/semi/api';

        // 화면에 Full HTML 코드 추가 (for 모든 페이지)
        SEMIAI.appendFullHTML(document.body);

        if (SEMIAI.isMain) {
            // 메인인 경우 whats new 상위에 마크업 추가
            const previousEl = document.querySelector('.st-semi-home-carousel');
            SEMIAI.appendFullHTML(previousEl);
        } else {
            // 메인이 아닌 경우 오른쪽 하단에 챗봇 아이콘 추가
            SEMIAI.appendSemiIcon();
        }

        // elements
        SEMIAI.semi = document.querySelectorAll('.ai-semi.fixed, .ai-semi.content');
        SEMIAI.fixedSemi = document.querySelector('.ai-semi.fixed');
        SEMIAI.contentSemi = document.querySelector('.ai-semi.content');
        SEMIAI.fixedResponseArea = SEMIAI.fixedSemi.querySelector('.ai-semi__inner');
        SEMIAI.miniSemi = document.querySelector('.ai-semi.floating');
        const semiActiveClass = 'ai-semi--active';

        // 이벤트 바인딩
        SEMIAI.bindScriptFullSEMI();
        SEMIAI.bindScriptSemiIcon();

        // 첫 화면 출력
        SEMIAI.semiSessionId = SEMIAI.getCookie('semiSessionId');
        if (!SEMIAI.semiSessionId) {
            // 처음 접속인 경우
            SEMIAI.semiSessionId = SEMIAI.generateUniqueId();
            SEMIAI.setCookie('semiSessionId', SEMIAI.semiSessionId);

            SEMIAI.firstShowFixedSemi();
        } else {
            // 두번째 접속인 경우
            // for test
            if (SEMIAI.needFixedLayerFirst) {
                SEMIAI.firstShowFixedSemi();
            } else {
                SEMIAI.fixedSemi.classList.add('hidden');
                SEMIAI.fixedSemi.classList.add('hiding');
                setTimeout(function () {
                    SEMIAI.fixedSemi.classList.add(semiActiveClass);
                }, 300);
            }
        }

        // recommended question 받아오기
        (async function () {
            SEMIAI.semi.forEach(function (semi) {
                const video = semi.querySelector('.ai-semi__logo video');
                SEMIAI.controlLoader(video);
            });
            const result = await SEMIAI.getRecommendedQuestion();
            SEMIAI.renderRelatedQuestions(result);
        })();

        // 버튼 위치 수정
        if (!SEMIAI.isMain) {
            SEMIAI.updateChatbotLayout();

            window.addEventListener('scroll', () => {
                SEMIAI.updateChatbotLayout();
            });
            window.addEventListener('resize', () => {
                SEMIAI.updateChatbotLayout();
            });
        }
    },
    getRecommendedQuestion: function () {
        // sample
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve([
                    'How do automotive image sensors contribute to safety?',
                    "What's the future of automotive image sensors?",
                    'What are the latest advancements in image sensor technology?',
                    'What are the specs of the Exynos 5300?',
                ]);
            }, 2000);
        });
    },
    appendSemiIcon: function () {
        const html = `<div class="ai-semi floating">
            <div class="before">
                <button type="button"><span class="sr-only">Open the semi</span></button>
            </div>
            <div class="ai-semi__input">
                <div class="input-wrap">
                    <input type="text" name="semi-input" placeholder="Type your question" value="" disabled />
                    <button type="button" class="submit"><span class="effect"><span class="submit-icon">Submit</span></span></button>
                    <button type="button" class="stop hide"><span class="stop-icon">Stop</span></button>
                </div>
            </div>
        </div>`;
        document.body.insertAdjacentHTML('beforeend', html);
    },
    bindScriptSemiIcon: function () {
        if (!SEMIAI.miniSemi) return false;
        // elements
        const semiInput = SEMIAI.miniSemi.querySelector('.ai-semi__input input[type="text"]');
        SEMIAI.miniSemi.querySelector('.before button').addEventListener('click', function () {
            SEMIAI.miniSemi.classList.add('opened');
        });
        function handleClickOutside(event) {
            if (!SEMIAI.miniSemi.contains(event.target)) {
                SEMIAI.miniSemi.classList.remove('opened');
            }
        }
        document.addEventListener('click', handleClickOutside);
        SEMIAI.bindInputScript(SEMIAI.miniSemi);
        // semi
        semiInput.disabled = false;
    },
    appendFullHTML: function (targetContainer) {
        const semiTypeClass = targetContainer === document.body ? 'fixed' : 'content';
        const html = `<div class="ai-semi ${semiTypeClass}">
                <div class="ai-semi__wrap">
                    <div class="ai-semi__layout">
                        <div class="ai-semi__inner">
                            <div class="ai-semi__logo" data-property="opacity" data-active="false" data-delay="1">
                                <div class="logo">
                                    <video playsinline muted src="${SEMIAI.loaderMP4}">
                                    </video>
                                </div>
                                <div class="logo-text">Semi</div>
                            </div>
                            <div class="ai-semi__greeting">
                                <div class="greeting greeting1" data-property="opacity" data-active="false" data-delay="2">Hi. I’m Semi,</div>
                                <div class="greeting greeting2" data-property="opacity" data-active="false" data-delay="3">an AI designed to get you answers fast.</div><br>
                                <div class="greeting greeting3" data-property="opacity" data-active="false" data-delay="4">I’m ready to answer your questions.</div>
                            </div>
                            <div class="ai-semi__close" data-property="opacity" data-active="false" data-delay="2">
                                <button type="button"><span class="sr-only">Close</span></button>
                                <div class="ai-semi__close--alert">
                                    Chat mode is on. Close to <br />return to the home page.
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="ai-semi__recommended" data-property="opacity" data-active="false" data-delay="4">
                        <div class="ai-semi__recommended--indicator">
                            <button type="button" class="scroll-to-left" disabled><span class="sr-only">Scroll to Left</span></button>
                            <button type="button" class="scroll-to-right"><span class="sr-only">Scroll to Right</span></button>
                        </div>
                        <div class="ai-semi__recommended--wrap">
                        </div>
                    </div>
                    <div class="ai-semi__input" data-property="opacity" data-active="false" data-delay="2">
                        <div class="input-wrap">
                            <input type="text" name="semi-input" placeholder="Type your question" value="" disabled />
                            <button type="button" class="submit"><span class="effect"><span class="submit-icon">Submit</span></span></button>
                            <button type="button" class="stop hide"><span class="stop-icon">Stop</span></button>
                        </div>
                        <div class="input-description">
                            Semi may display inaccurate info, including about people, so double-check its responses.
                            <a href="#" target="_blank">Your privacy & Semi</a>
                        </div>
                    </div>
                    <div class="cotton-candy-wrap top">
                        <div class="cotton-candy cotton-candy--type1"></div>
                    </div>
                    <div class="cotton-candy-wrap bottom">
                        <div class="cotton-candy cotton-candy--type2"></div>
                        <div class="cotton-candy cotton-candy--type3"></div>
                        <div class="cotton-candy cotton-candy--type4"></div>
                    </div>
                </div>
            </div>`;
        if (semiTypeClass === 'fixed') {
            targetContainer.insertAdjacentHTML('beforeend', html);
        } else {
            targetContainer.insertAdjacentHTML('afterend', html);
        }
    },
    bindRecommended: function () {
        SEMIAI.semi.forEach(function (semi) {
            const recommendedArea = semi.querySelector('.ai-semi__recommended--wrap');
            const semiInput = semi.querySelector('.ai-semi__input input[type="text"]');
            const submitBtn = semi.querySelector('.ai-semi__input button.submit');
            const stopBtn = semi.querySelector('.ai-semi__input button.stop');
            if (recommendedArea) {
                recommendedArea.querySelectorAll('button').forEach(function (btn) {
                    // recommendedArea 클릭
                    btn.addEventListener('click', function () {
                        semiInput.value = btn.textContent;
                        semiInput.focus();
                        if (!SEMIAI.loading) submitBtn.classList.add('typing');
                    });
                    setTimeout(function () {
                        btn.parentElement.classList.add('active');
                    }, 200);
                });
            }
        });
    },
    bindInputScript: function (semi) {
        // elements
        const semiInput = semi.querySelector('.ai-semi__input input[type="text"]');
        const closeDesc = semi.querySelector('.ai-semi__close .ai-semi__close--alert');
        const closeBtn = semi.querySelector('.ai-semi__close button');
        const submitBtn = semi.querySelector('.ai-semi__input button.submit');
        const stopBtn = semi.querySelector('.ai-semi__input button.stop');
        if (semi.classList.contains('fixed')) {
            // Close 버튼 호버시, 왼쪽 메시지 보여주기
            closeBtn.addEventListener('mouseenter', function () {
                // close 왼쪽 메시지 보여주기
                closeDesc.classList.add('active');
            });
            // Close 버튼 아웃시, 왼쪽 메시지 숨기기
            closeBtn.addEventListener('mouseleave', function () {
                // close 왼쪽 메시지 보여주기
                closeDesc.classList.remove('active');
            });
            // Close 버튼 클릭시 hide 클래스 붙여서 화면에서 내려보내고, 1초 후 스크롤 되살림
            closeBtn.addEventListener('click', function () {
                if (SEMIAI.controller) SEMIAI.controller.abort();
                SEMIAI.hideFixedSemi(closeBtn);
            });
            semiInput.addEventListener('blur', function (event) {
                window.scrollTo(0, 0);
            });
        }
        // 입력시
        semiInput.addEventListener('keyup', function (event) {
            // 엔터 입력시
            if (event.key === 'Enter') {
                runQuestion();
            }
            if (semiInput.value.trim() === '' || SEMIAI.loading) {
                submitBtn.classList.remove('typing');
            } else {
                submitBtn.classList.add('typing');
            }
        });
        // 서브밋 클릭시
        submitBtn.addEventListener('click', function () {
            runQuestion();
        });
        const runQuestion = function () {
            const question = semiInput.value.trim();
            const fixedSubmitBtn = SEMIAI.fixedSemi.querySelector('.ai-semi__input button.submit');
            const fixedStopBtn = SEMIAI.fixedSemi.querySelector('.ai-semi__input button.stop');
            const fixedSemiInput = SEMIAI.fixedSemi.querySelector(
                '.ai-semi__input input[type="text"]'
            );
            if (question === '' || SEMIAI.loading) {
                return;
            }
            // current buttons
            semiInput.value = '';
            submitBtn.classList.remove('typing');
            // fixed area's buttons
            fixedSemiInput.value = '';
            fixedSubmitBtn.classList.remove('typing');
            fixedSubmitBtn.classList.add('hide');
            fixedStopBtn.classList.remove('hide');
            SEMIAI.fetchSEMI(question);
            SEMIAI.question = question;
        };
        // 스탑 버튼 클릭시
        stopBtn.addEventListener('click', function () {
            SEMIAI.controller.abort();
            const currentElements = SEMIAI.fixedResponseArea.querySelectorAll('.ai-semi__question');
            const currentElement = SEMIAI.fixedResponseArea.querySelector(
                '.ai-semi__question:last-child'
            );
            if (currentElements.length <= 1) {
                // 첫번째 답변인 경우
                SEMIAI.fixedSemi.querySelector('.ai-semi__logo').classList.remove('changed');
                SEMIAI.fixedSemi.querySelector('.ai-semi__greeting').classList.remove('hide');
                SEMIAI.fixedSemi.querySelector('.ai-semi__close').classList.remove('changed');
                SEMIAI.fixedSemi.querySelector('.ai-semi__recommended').classList.remove('hide');
                currentElement.remove();
            } else {
                // 첫번째 답변이 아닌 경우
                SEMIAI.fixedSemi.querySelector('.ai-semi__input input[type="text"]').value =
                    SEMIAI.question;
                currentElement.remove();
            }
            submitBtn.classList.remove('typing');
            submitBtn.classList.remove('hide');
            stopBtn.classList.add('hide');
            submitBtn.focus();
        });

        // semi
        semiInput.disabled = false;
    },
    bindScriptFullSEMI: function () {
        SEMIAI.semi.forEach(function (semi) {
            SEMIAI.bindInputScript(semi);
        });
        // Recommended Area
        SEMIAI.semi.forEach(function (semi) {
            if (!semi.classList.contains('floating')) {
                let scrollAmount = 0;
                const recommendedArea = semi.querySelector('.ai-semi__recommended--wrap');
                const indicatorLeft = semi.querySelector(
                    '.ai-semi__recommended--indicator button.scroll-to-left'
                );
                const indicatorRight = semi.querySelector(
                    '.ai-semi__recommended--indicator button.scroll-to-right'
                );
                SEMIAI.controlRecommededIndicator = function (area, left, right) {
                    setTimeout(function () {
                        const scrollSize = area.scrollLeft;
                        // indicator control
                        if (scrollSize >= area.scrollWidth - area.clientWidth - 3) {
                            // 끝까지 스크롤 했으면 오른쪽 버튼 숨김
                            right.disabled = true;
                        } else {
                            right.disabled = false;
                        }
                        if (scrollSize === 0) {
                            left.disabled = true;
                        } else {
                            left.disabled = false;
                        }
                    }, 700);
                };
                const runWheel = function (scrollAmount) {
                    recommendedArea.scrollLeft = scrollAmount;
                    SEMIAI.controlRecommededIndicator(
                        recommendedArea,
                        indicatorLeft,
                        indicatorRight
                    );
                };
                recommendedArea.addEventListener('wheel', function (event) {
                    let delta = event.wheelDelta ? -event.wheelDelta : event.deltaY;
                    scrollAmount += delta;
                    scrollAmount = Math.min(
                        recommendedArea.scrollWidth - recommendedArea.clientWidth,
                        Math.max(0, scrollAmount)
                    );
                    runWheel(scrollAmount);
                    event.preventDefault();
                });
                // Left Right indicator 클릭 시
                indicatorLeft.addEventListener('click', function () {
                    const scrollSize = recommendedArea.clientWidth;
                    recommendedArea.scrollTo(scrollSize * -1, 0);
                    SEMIAI.controlRecommededIndicator(
                        recommendedArea,
                        indicatorLeft,
                        indicatorRight
                    );
                });
                indicatorRight.addEventListener('click', function () {
                    const scrollSize = recommendedArea.clientWidth;
                    recommendedArea.scrollTo(scrollSize, 0);
                    SEMIAI.controlRecommededIndicator(
                        recommendedArea,
                        indicatorLeft,
                        indicatorRight
                    );
                });
            }
        });
    },
    hideFixedSemi: function (closeBtn) {
        SEMIAI.fixedSemi.classList.add('hiding');
        window.scrollTo(0, SEMIAI.scrollSize);
        setTimeout(function () {
            document.documentElement.classList.remove('popupOpen');
            SEMIAI.fixedSemi.classList.add('hidden');
        }, 1000);
        // 쿠키 셋팅
        SEMIAI.isFullReady = false;
    },
    firstShowFixedSemi: function () {
        SEMIAI.isFullReady = true;
        window.scrollTo(0, 0);
        document.documentElement.classList.add('popupOpen');

        // elements
        const semiInput = SEMIAI.fixedSemi.querySelector('.ai-semi__input input[type="text"]');
        const closeDesc = SEMIAI.fixedSemi.querySelector('.ai-semi__close .ai-semi__close--alert');
        const closeBtn = SEMIAI.fixedSemi.querySelector('.ai-semi__close button');
        const submitBtn = SEMIAI.fixedSemi.querySelector('.ai-semi__input button.submit');
        const semiActiveClass = 'ai-semi--active';

        // 화면에 출력
        SEMIAI.fixedSemi.classList.add(semiActiveClass);

        // 각 요소 불투명하게 변경 (css 에서 delay 조절)
        setTimeout(function () {
            const opacityEls = SEMIAI.fixedSemi.querySelectorAll("[data-property='opacity']");
            opacityEls.forEach(function (el) {
                el.dataset.active = 'true';
            });
            // close 왼쪽 메시지 보여주기
            closeDesc.classList.add('active');
        }, 400);
        setTimeout(function () {
            // 3초 후 close 왼쪽 메시지 닫기
            closeDesc.classList.remove('active');
        }, 3000);
    },
    showFixedSemi: function (openBtn) {
        SEMIAI.isFullReady = true;
        SEMIAI.scrollSize = window.scrollY;

        // elements
        const semiInput = SEMIAI.fixedSemi.querySelector('.ai-semi__input input[type="text"]');
        const closeDesc = SEMIAI.fixedSemi.querySelector('.ai-semi__close .ai-semi__close--alert');
        const closeBtn = SEMIAI.fixedSemi.querySelector('.ai-semi__close button');
        const submitBtn = SEMIAI.fixedSemi.querySelector('.ai-semi__input button.submit');
        const semiActiveClass = 'ai-semi--active';

        // 처음 열린 화면 기준 불필요한 영역 제거
        SEMIAI.fixedSemi.querySelector('.ai-semi__logo').classList.add('changed');
        SEMIAI.fixedSemi.querySelector('.ai-semi__greeting').classList.add('hide');
        SEMIAI.fixedSemi.querySelector('.ai-semi__close').classList.add('changed');
        SEMIAI.fixedSemi.querySelector('.ai-semi__recommended').classList.add('hide');

        // 화면에 출력
        document.documentElement.classList.add('popupOpen');
        SEMIAI.fixedSemi.classList.remove('hidden');
        SEMIAI.fixedSemi.classList.remove('hiding');
        SEMIAI.fixedSemi.classList.add(semiActiveClass);
        SEMIAI.fixedSemi.classList.add('showing');
        setTimeout(function () {
            window.scrollTo(0, 0);
        }, 500);
        setTimeout(function () {
            SEMIAI.fixedSemi.classList.remove('showing');
        }, 2000);

        // 각 요소 불투명하게 변경 (css 에서 delay 조절)
        const opacityEls = SEMIAI.fixedSemi.querySelectorAll("[data-property='opacity']");
        opacityEls.forEach(function (el) {
            el.dataset.active = 'true';
        });
    },
    renderChatbotResponse: function (text) {
        function wrapFirstSentence(text) {
            // let match = text.match(/(.*?[.!?])(.*)/);
            let match = text.match(/(.*?[.!?;:])([\s\n].*)/);
            // let match = text.match(/(.?[.!?;:\...])([\s\n].)/);
            if (match) {
                return `<p class="highlight">${match[1]}</p> ${match[2]}`;
            } else {
                return `<p class="highlight">${text}</p>`;
            }
        }
        function removeLeadingPipeNewline(str) {
            return str.replace(/^\|\n/, '  ');
        }
        function removeParagraphBreaks(str) {
            return str.replace(/<p><br>/g, '<p>').replace(/<p><br \/>/g, '<p>');
        }

        var div = document.createElement('div');
        div.className = 'ai-semi__semi';

        let finalText = text;
        // PM9C1, PM9A1a, PM9A1, PM981a, PM991/PM991a, PM881 의 spec을 잘 정리해서 테이블 형태로 보여줘

        // div.innerHTML = wrapFirstSentence(
        //     removeParagraphBreaks(SEMIAI.parseMDtoHTML(removeLeadingPipeNewline(text)))
        // );
        console.log(finalText.trim());
        console.log('%c --------------------------------', 'color:red');
        if (finalText.startsWith('|\n  ')) {
            // |와 줄바꿈 그리고 띄어쓰기 2개로 시작하면 LLM이 마크다운을 잘못 주고 있는 것임 // 해당 텍스트 삭제
            finalText = removeLeadingPipeNewline(finalText).trim();
            console.log('%c |와 줄바꿈 그리고 띄어쓰기 2개로 시작해서 제거했음', 'color:red');
            console.log(finalText);
            console.log('%c --------------------------------', 'color:red');
        }
        // HTML 로 변환
        finalText = SEMIAI.parseMDtoHTML(finalText);
        console.log('%c MD를 HTML로 변경했음', 'color:red');
        console.log(finalText);
        console.log('%c --------------------------------', 'color:red');

        if (finalText.startsWith('|')) {
            // | 로 시작하는 경우 테이블로 시작하므로 첫번째 문장을 하이라이트 하지 않음
            console.log(
                '%c 그럼에도 | 로 시작하므로 테이블 앞에 텍스트가 없음 (첫 문장 하이라이트 금지)',
                'color:red'
            );
            console.log(finalText);
            console.log('%c --------------------------------', 'color:red');
        } else {
            // 그 외의 경우 첫번째 문장을 하이라이트 함
            finalText = wrapFirstSentence(finalText).trim();
            console.log('%c 첫 문장 하이라이트 실행', 'color:red');
            console.log(finalText);
            console.log('%c --------------------------------', 'color:red');
        }

        // if (finalText.trim().startsWith('|')) {
        //     // | 로 시작하는 경우 테이블로 시작하므로 첫번째 문장을 하이라이트 하지 않음
        //     finalText = removeParagraphBreaks();
        // } else {
        //     // 그 외의 경우 첫번째 문장을 하이라이트 함
        //     finalText = wrapFirstSentence(removeParagraphBreaks());
        // }
        div.innerHTML = finalText;

        const currentElement = SEMIAI.fixedResponseArea.querySelector(
            '.ai-semi__question:last-child'
        );
        currentElement.appendChild(div);

        const csvDownBtns = currentElement.querySelectorAll('tfoot button');
        csvDownBtns.forEach((btn) => {
            btn.addEventListener('click', function () {
                const table = btn.closest('.ai-semi-table-wrap').querySelector('table');
                if (table && table.tagName === 'TABLE') {
                    let csv = tableToCSV(table);
                    downloadCSV(csv, 'Semi-export-to-CSV.csv');
                }
            });
        });

        function downloadCSV(csv, filename) {
            if (!csv) {
                console.error('No CSV data provided');
                return;
            }

            let csvFile;
            let downloadLink;

            try {
                csvFile = new Blob([csv], { type: 'text/csv' });
            } catch (e) {
                console.error('Failed to create Blob', e);
                return;
            }

            downloadLink = document.createElement('a');
            downloadLink.download = filename;
            downloadLink.href = window.URL.createObjectURL(csvFile);
            downloadLink.style.display = 'none';

            document.body.appendChild(downloadLink);
            downloadLink.click();

            document.body.removeChild(downloadLink);
            window.URL.revokeObjectURL(downloadLink.href);
        }
        function tableToCSV(table) {
            if (!table) {
                console.error('No table element provided');
                return '';
            }
            let csv = [];
            let rows = table.querySelectorAll('tr');
            for (let i = 0; i < rows.length; i++) {
                let row = [];
                let cols = rows[i].querySelectorAll('td, th');
                for (let j = 0; j < cols.length; j++) {
                    // 데이터에 쉼표, 줄바꿈, 큰따옴표가 있는 경우 처리
                    let text = cols[j].innerText.replace(/"/g, '""'); // 큰따옴표 이스케이프
                    if (text.includes(',') || text.includes('\n')) {
                        text = `"${text}"`;
                    }
                    row.push(text);
                }
                csv.push(row.join(','));
            }
            return csv.join('\n');
        }

        currentElement.style.minHeight = 'auto';
        const scrollAreaHeight = SEMIAI.fixedResponseArea.parentElement.clientHeight;
        const currentHeight = currentElement.clientHeight;
        if (currentHeight < scrollAreaHeight) {
            currentElement.style.minHeight = scrollAreaHeight + 'px';
            const scrollDocumentHeight = SEMIAI.fixedResponseArea.clientHeight;
            const scrollSize = scrollDocumentHeight - scrollAreaHeight;
            SEMIAI.fixedResponseArea.parentElement.scrollTo(0, parseInt(scrollSize));
        }
        // SEMIAI.semi.forEach(function (semi) {
        //     const submitBtn = semi.querySelector('.ai-semi__input button.submit');
        //     const stopBtn = semi.querySelector('.ai-semi__input button.stop');
        //     submitBtn.classList.remove('typing');
        //     submitBtn.classList.remove('hide');
        //     stopBtn.classList.add('hide');
        // });
        const fixedSubmitBtn = SEMIAI.fixedSemi.querySelector('.ai-semi__input button.submit');
        const fixedStopBtn = SEMIAI.fixedSemi.querySelector('.ai-semi__input button.stop');
        const fixedSemiInput = SEMIAI.fixedSemi.querySelector('.ai-semi__input input[type="text"]');
        fixedSubmitBtn.classList.remove('hide');
        fixedStopBtn.classList.add('hide');
        if (fixedSemiInput.value.trim().length > 0) {
            fixedSubmitBtn.classList.add('typing');
        } else {
            fixedSubmitBtn.classList.remove('typing');
        }
    },
    parseMDtoHTML: function (markdownText) {
        // Convert headers
        markdownText = markdownText.replace(/^###### (.*$)/gim, '<h6>$1</h6>');
        markdownText = markdownText.replace(/^##### (.*$)/gim, '<h5>$1</h5>');
        markdownText = markdownText.replace(/^#### (.*$)/gim, '<h4>$1</h4>');
        markdownText = markdownText.replace(/^### (.*$)/gim, '<h3>$1</h3>');
        markdownText = markdownText.replace(/^## (.*$)/gim, '<h2>$1</h2>');
        markdownText = markdownText.replace(/^# (.*$)/gim, '<h1>$1</h1>');

        // Convert bold text
        markdownText = markdownText.replace(/\*\*(.*)\*\*/gim, '<b>$1</b>');
        markdownText = markdownText.replace(/__(.*)__/gim, '<b>$1</b>');

        // Convert italic text
        markdownText = markdownText.replace(/\*(.*)\*/gim, '<i>$1</i>');
        markdownText = markdownText.replace(/_(.*)_/gim, '<i>$1</i>');

        // Convert bold and italic text
        markdownText = markdownText.replace(/\*\*\*(.*)\*\*\*/gim, '<b><i>$1</i></b>');
        markdownText = markdownText.replace(/___(.*)___/gim, '<b><i>$1</i></b>');

        // Convert links
        markdownText = markdownText.replace(
            /\[(.*?)\]\((.*?)\)/gim,
            '<a href="$2" target="_blank">$1</a>'
        );

        // Convert unordered lists
        markdownText = markdownText.replace(/^\s*[-+*]\s+(.*)$/gim, '<ul><li>$1</li></ul>');
        markdownText = markdownText.replace(/<\/ul>\s*<ul>/gim, '');

        // Convert ordered lists
        markdownText = markdownText.replace(/^\s*\d+\.\s+(.*)$/gim, '<ol><li>$1</li></ol>');
        markdownText = markdownText.replace(/<\/ol>\s*<ol>/gim, '');

        // Convert blockquotes
        markdownText = markdownText.replace(/^\> (.*$)/gim, '<blockquote>$1</blockquote>');

        // Convert inline code
        markdownText = markdownText.replace(/`(.*?)`/gim, '<code>$1</code>');

        // Convert code blocks
        markdownText = markdownText.replace(/```([\s\S]*?)```/gim, '<pre><code>$1</code></pre>');

        // Convert images
        markdownText = markdownText.replace(/!\[(.*?)\]\((.*?)\)/gim, '<img src="$2" alt="$1" />');

        // Convert tables
        markdownText = markdownText.replace(
            // /^\|(.+?)\|\s*\n\|([-:| ]+)\|\s*\n((?:\|.*\|\s*\n)*)/gim,
            /^\s*\|(.+?)\|\s*\n\s*\|([-:| ]+)\|\s*\n((?:\s*\|.*\|\s*\n)*)/gim,
            function (match, header, align, rows) {
                let html = '<div class="ai-semi-table-wrap"><table><thead><tr>';
                let headers = header.split('|').map((h) => h.trim());
                // .filter(Boolean);
                headers.forEach((header) => {
                    html += `<th>${header}</th>`;
                });
                html += '</tr></thead><tbody>';
                let rowArray = rows.trim().split('\n');
                let columnCount = 0;
                rowArray.forEach((row) => {
                    if (row.trim().length > 0) {
                        // 빈 줄 무시
                        html += '<tr>';
                        let cols = row.split('|').map((c) => c.trim());
                        // .filter(Boolean);
                        columnCount = cols.length;
                        cols.forEach((col, idx) => {
                            if (idx != 0 && idx != columnCount - 1) html += `<td>${col}</td>`;
                        });
                        html += '</tr>';
                    }
                });
                html += `</tbody>
                        <tfoot>
                            <td colspan="${columnCount - 2}">
                                <button type="button">Export to CSV</button>
                            </td>
                        </tfoot>
                    </table>
                </div>`;
                return html;
            }
        );

        // Convert paragraphs
        // markdownText = markdownText.replace(
        //     /^(?!<(h\d|ul|ol|li|blockquote|pre|code|img|table|thead|tbody|tr|th|td|a|b|i|p))(.*\S.*)$/gim,
        //     '<p>$2</p>'
        // );

        // Convert line breaks
        markdownText = markdownText.replace(/\n\n/gim, '<br />');
        markdownText = markdownText.replace(/\n/gim, ' ');

        // console.log(markdownText);

        return markdownText.trim();
    },
    renderRelatedQuestions: function (relatedQuestions) {
        // Test
        // SEMIAI.renderRelatedQuestions(["question1", "question2", "question3"])
        if (!Array.isArray(relatedQuestions) || !relatedQuestions.length) return;
        // const html = `<button type="button"><span></span></button>`;
        SEMIAI.loading = false;
        relatedQuestions.forEach((text) => {
            const html = `<div class="button"><button type="button"><span>${text}</span></button></div>`;
            SEMIAI.semi.forEach(function (semi) {
                const wrap = semi.querySelector('.ai-semi__recommended--wrap');
                wrap.insertAdjacentHTML('beforeend', html);
            });
        });
        SEMIAI.semi.forEach(function (semi) {
            const indicator = semi.querySelector('.ai-semi__recommended--indicator');
            indicator.classList.add('active');
        });
        // 이벤트
        SEMIAI.bindRecommended();
    },
    renderReferenceLinks: function (text) {
        if (!SEMIAI.useFetchPage) return false;
        //
        var referenceDIV = document.createElement('div');
        referenceDIV.className = 'ai-semi-reference-list';
        SEMIAI.fixedResponseArea
            .querySelector('.ai-semi__question:last-child .ai-semi__semi')
            .appendChild(referenceDIV);
        const getPages = function (url) {
            async function fetchHTML(url) {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                const text = await response.text();
                return text;
            }
            function extractOGTags(html) {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const ogTitle = doc.querySelector('meta[property="og:title"]')?.content;
                const ogImage = doc.querySelector('meta[property="og:image"]')?.content;
                const ogUrl = doc.querySelector('meta[property="og:url"]')?.content;
                return {
                    ogTitle,
                    ogImage,
                    ogUrl,
                };
            }
            fetchHTML(url)
                .then((html) => {
                    const ogTags = extractOGTags(html);
                    const templateHTML = `<div class="ai-semi-reference-item">
                            <a href="${ogTags.ogUrl}" target="_blank">
                                <div class="img-area">
                                    <img src="${ogTags.ogImage.replace('http://', '//')}" alt="" />
                                </div>
                                <div class="txt-area">
                                    <div class="site-title">
                                        ${ogTags.ogTitle}
                                    </div>
                                </div>
                            </a>
                        </div>`;
                    console.log(templateHTML);
                    referenceDIV.insertAdjacentHTML('beforeend', templateHTML);
                })
                .catch((error) => {
                    console.error('Error fetching the webpage:', error.message);
                });
        };
        function extractLinks(text) {
            const linkRegex = /\[.*?\]\((.*?)\)/g;
            const links = [];
            let match;
            while ((match = linkRegex.exec(text)) !== null) {
                links.push(match[1]);
            }
            links.forEach((link) => {
                if (link.indexOf('semiconductor.samsung.com') > -1) {
                    getPages(link);
                }
            });
        }
        extractLinks(text);
    },
    renderUserInput: function (text) {
        const html = `
            <div class="ai-semi__question">
                <div class="ai-semi__user">
                    <p class="ai-semi__user--text">${text}</p>
                    <div class="ai-semi__loading">
                        <div class="logo">
                            <video playsinline muted src="${SEMIAI.loaderMP4}"
                            ></video>
                        </div>
                    </div>
                </div>
            </div>`;

        SEMIAI.fixedResponseArea.insertAdjacentHTML('beforeend', html);

        SEMIAI.fixedResponseArea.querySelectorAll('.ai-semi__question').forEach(function (q) {
            q.removeAttribute('style');
        });

        const currentElement = SEMIAI.fixedResponseArea.querySelector(
            '.ai-semi__question:last-child'
        );
        const video = currentElement.querySelector('video');
        SEMIAI.controlLoader(video);

        const scrollDocumentHeight = SEMIAI.fixedResponseArea.clientHeight;
        const scrollAreaHeight = SEMIAI.fixedResponseArea.parentElement.clientHeight;
        currentElement.style.minHeight = scrollAreaHeight + 'px';
        SEMIAI.fixedResponseArea.parentElement.scrollTo(0, parseInt(scrollDocumentHeight));
    },
    renderError: function (err) {
        SEMIAI.renderChatbotResponse(err.message);
        // var div = document.createElement('div');
        // div.className = 'error';
        // div.innerText = err.message;
        // SEMIAI.fixedResponseArea.appendChild(div);
    },
    controlLoader: function (video) {
        let count = 0;
        SEMIAI.loading = true;

        video.load();
        video.addEventListener('loadedmetadata', function () {
            const size = video.duration;
            const prologue = 1 + 0.033333;
            const epilogue = 2;
            video.currentTime = 0;
            video.play();
            video.addEventListener('timeupdate', function () {
                if (SEMIAI.loading && video.currentTime >= epilogue) {
                    video.currentTime = prologue;
                    count++;
                }
            });
        });
    },
    fetchSEMI: function (question) {
        if (SEMIAI.isFullReady) {
            // Full 레이어가 열려 있는 경우
            SEMIAI.fixedSemi.querySelector('.ai-semi__logo').classList.add('changed');
            SEMIAI.fixedSemi.querySelector('.ai-semi__greeting').classList.add('hide');
            SEMIAI.fixedSemi.querySelector('.ai-semi__close').classList.add('changed');
            SEMIAI.fixedSemi.querySelector('.ai-semi__recommended').classList.add('hide');
        } else {
            // Full 레이어가 닫혀 있는 경우
            SEMIAI.showFixedSemi();
        }
        SEMIAI.controller = new AbortController();
        SEMIAI.renderUserInput(question);
        sendMessageToChatbot(question)
            .then((json) => {
                console.log(json);
                SEMIAI.renderChatbotResponse(json.text.trim());
                SEMIAI.renderReferenceLinks(json.text.trim());
                // SEMIAI.renderRelatedQuestions(json.relatedQuestions);
                // SEMIAI.renderReferenceLinks(json.referenceLinks);
            })
            .catch(SEMIAI.renderError)
            .finally(() => {
                SEMIAI.loading = false;
            });

        async function sendMessageToChatbot(queryInput) {
            const headers = {
                Accept: 'application/json',
                'Content-Type': 'application/json; charset=utf-8',
            };
            const params = new URLSearchParams({
                sessionId: SEMIAI.semiSessionId,
            });
            const body = JSON.stringify({
                queryInput: queryInput,
            });
            const url = `${SEMIAI.apigeeEndPoint}/chat/sendMessage?${params}`;
            const response = await fetch(url, {
                method: 'POST',
                headers,
                body,
                signal: SEMIAI.controller.signal,
            });
            if (!response.ok) {
                SEMIAI.semiSessionId = SEMIAI.generateUniqueId();
                SEMIAI.setCookie('semiSessionId', SEMIAI.semiSessionId);
                // Too Many Requests
                // if (response.status === 429) {
                //     throw Error('Too Many Request. Try again after a while.');
                // } else {
                //     throw Error(
                //         "Could you please rephrase your question so that it's a bit more specific?"
                //     );
                // }
                const errorResponse = await response.json();
                console.error(errorResponse);
                throw Error(
                    'Hmm. I could’t find that answer.  Maybe try saying it another way or asking it again later'
                );
            }
            return await response.json();
        }
    },
    generateUniqueId: function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
            var r = (Math.random() * 16) | 0,
                v = c == 'x' ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
    },
    setCookie: function (name, value, options = {}) {
        // setCookie('user', 'John', {secure: true, 'max-age': 3600});
        //
        // var date = new Date();
        // date.setTime(date.getTime() + unixTime);
        // document.cookie =
        //     encodeURIComponent(name) +
        //     '=' +
        //     encodeURIComponent(value) +
        //     ';expires=' +
        //     date.toUTCString() +
        //     ';path=/';
        options = {
            // path: '/',
            // 필요한 경우, 옵션 기본값을 설정할 수도 있습니다.
            ...options,
        };
        if (options.expires instanceof Date) {
            options.expires = options.expires.toUTCString();
        }
        let updatedCookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
        for (let optionKey in options) {
            updatedCookie += '; ' + optionKey;
            let optionValue = options[optionKey];
            if (optionValue !== true) {
                updatedCookie += '=' + optionValue;
            }
        }
        document.cookie = updatedCookie;
    },
    getCookie: function (name) {
        // var value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
        // return value ? value[2] : null;
        let matches = document.cookie.match(
            new RegExp(
                '(?:^|; )' + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + '=([^;]*)'
            )
        );
        return matches ? decodeURIComponent(matches[1]) : undefined;
    },
    deleteCookie: function (name) {
        document.cookie = encodeURIComponent(name) + '=; expires=Thu, 01 JAN 1999 00:00:10 GMT';
    },
    updateChatbotLayout: function () {
        setTimeout(function () {
            const posOfTop = document.querySelector('.fab-area.active .btn-goTop');
            const posOfShare = document.querySelector(
                '.AR02_article-header-sns .AR02_article-header-sns-mobile-link'
            );
            let checkFloatingBtn = posOfTop;
            let selected = 'top';
            if (posOfShare) {
                if (posOfShare.getBoundingClientRect().top > 0) {
                    checkFloatingBtn = posOfShare;
                    selected = 'share';
                } else {
                    checkFloatingBtn = posOfTop;
                    selected = 'top';
                }
            }
            const gap = window.clientWidth > 768 ? 16 : 12;
            let top = !checkFloatingBtn
                ? 0
                : window.innerHeight - checkFloatingBtn.getBoundingClientRect().top;
            if (top < 24) top = 24;
            if (SEMIAI.miniSemi) SEMIAI.miniSemi.style.bottom = top + gap + 'px';
        }, 200);
    },
};

window.addEventListener('load', () => {
    setTimeout(function () {
        SEMIAI.init();
    }, 1000);
});

//# sourceMappingURL=semi.min.js.map
